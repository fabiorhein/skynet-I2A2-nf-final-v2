"""
Script para executar migra√ß√µes SQL no PostgreSQL/Supabase.

Uso:
  python scripts/apply_migrations.py              # Executa todas as migra√ß√µes
  python scripts/apply_migrations.py --single NOME # Executa apenas uma migra√ß√£o espec√≠fica
  python scripts/apply_migrations.py --help       # Mostra esta ajuda
"""
import os
import sys
import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
from pathlib import Path

# Adiciona o diret√≥rio raiz ao path para importar o config
sys.path.append(str(Path(__file__).parent.parent))

try:
    from config import DATABASE_CONFIG
    print("‚úÖ Configura√ß√µes carregadas com sucesso do config.py")
except ImportError as e:
    print(f"‚ùå Erro ao importar configura√ß√µes: {e}")
    print("Certifique-se de que o arquivo config.py existe no diret√≥rio raiz do projeto.")
    sys.exit(1)

def load_migration_file(migration_file: str) -> str:
    """Carrega o conte√∫do de um arquivo de migra√ß√£o."""
    try:
        with open(migration_file, 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        print(f"Erro ao ler o arquivo de migra√ß√£o {migration_file}: {e}")
        sys.exit(1)

def run_migration(conn, migration_sql: str):
    """Executa uma migra√ß√£o SQL."""
    try:
        with conn.cursor() as cur:
            # Executa cada comando separadamente
            for command in migration_sql.split(';'):
                command = command.strip()
                if command:
                    print(f"Executando: {command[:100]}...")
                    cur.execute(command)
        conn.commit()
        print("‚úÖ Migra√ß√£o executada com sucesso!")
    except Exception as e:
        conn.rollback()
        print(f"‚ùå Erro ao executar migra√ß√£o: {e}")
        sys.exit(1)


def main():
    # Verifica argumentos de linha de comando
    if len(sys.argv) > 1:
        if sys.argv[1] == '--single' and len(sys.argv) > 2:
            # Modo single migration
            migration_name = sys.argv[2]
            run_single_migration(migration_name)
            return
        elif sys.argv[1] in ['--help', '-h']:
            print("Uso:")
            print("  python scripts/apply_migrations.py              # Executa todas as migra√ß√µes")
            print("  python scripts/apply_migrations.py --single NOME # Executa apenas uma migra√ß√£o espec√≠fica")
            print("  python scripts/apply_migrations.py --help       # Mostra esta ajuda")
            sys.exit(0)

    # Modo padr√£o: executa todas as migra√ß√µes
    run_all_migrations()


def run_single_migration(migration_name: str):
    """Executa uma migra√ß√£o espec√≠fica."""
    db_config = {
        **DATABASE_CONFIG,
        'connect_timeout': '10'  # Timeout de conex√£o de 10 segundos
    }

    # Verifica se as credenciais necess√°rias est√£o presentes
    required = ['dbname', 'user', 'password', 'host', 'port']
    missing = [key for key in required if not db_config.get(key)]
    if missing:
        print(f"‚ùå Erro: Configura√ß√µes ausentes no config.py: {', '.join(missing)}")
        sys.exit(1)

    # Imprime as configura√ß√µes (sem a senha) para depura√ß√£o
    print("üîë Configura√ß√µes de conex√£o:")
    for key, value in db_config.items():
        if key != 'password':
            print(f"   {key}: {value}")

    print("üîó Conectando ao banco de dados...")

    # Conecta ao banco de dados
    try:
        conn = psycopg2.connect(**db_config)
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        print("‚úÖ Conex√£o com o banco de dados estabelecida com sucesso!")
    except Exception as e:
        print(f"‚ùå Erro ao conectar ao banco de dados: {e}")
        print("\nDicas de solu√ß√£o de problemas:")
        print("1. Verifique se o seu IP est√° na lista de permiss√µes do Supabase")
        print("2. Verifique se as credenciais est√£o corretas")
        print("3. Tente desativar temporariamente o firewall ou VPN, se estiver usando")
        sys.exit(1)

    # Encontra o arquivo de migra√ß√£o espec√≠fico
    migrations_dir = Path(__file__).parent.parent / 'migration'
    migration_file = migrations_dir / migration_name

    if not migration_file.exists():
        print(f"‚ùå Arquivo de migra√ß√£o n√£o encontrado: {migration_name}")
        print(f"üìÇ Arquivos dispon√≠veis em {migrations_dir}:")
        for f in migrations_dir.glob('*.sql'):
            if f.name != '000_template.sql':
                print(f"   {f.name}")
        sys.exit(1)

    print(f"\nüöÄ Executando migra√ß√£o espec√≠fica: {migration_name}")
    migration_sql = load_migration_file(migration_file)
    run_migration(conn, migration_sql)

    conn.close()
    print(f"\n‚ú® Migra√ß√£o {migration_name} conclu√≠da com sucesso!")


def run_all_migrations():
    """Executa todas as migra√ß√µes em ordem."""
    db_config = {
        **DATABASE_CONFIG,
        'connect_timeout': '10'  # Timeout de conex√£o de 10 segundos
    }

    # Verifica se as credenciais necess√°rias est√£o presentes
    required = ['dbname', 'user', 'password', 'host', 'port']
    missing = [key for key in required if not db_config.get(key)]
    if missing:
        print(f"‚ùå Erro: Configura√ß√µes ausentes no config.py: {', '.join(missing)}")
        sys.exit(1)

    # Imprime as configura√ß√µes (sem a senha) para depura√ß√£o
    print("üîë Configura√ß√µes de conex√£o:")
    for key, value in db_config.items():
        if key != 'password':
            print(f"   {key}: {value}")

    print("üîó Conectando ao banco de dados...")

    # Conecta ao banco de dados
    try:
        conn = psycopg2.connect(**db_config)
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        print("‚úÖ Conex√£o com o banco de dados estabelecida com sucesso!")
    except Exception as e:
        print(f"‚ùå Erro ao conectar ao banco de dados: {e}")
        print("\nDicas de solu√ß√£o de problemas:")
        print("1. Verifique se o seu IP est√° na lista de permiss√µes do Supabase")
        print("2. Verifique se as credenciais est√£o corretas")
        print("3. Tente desativar temporariamente o firewall ou VPN, se estiver usando")
        print("4. Verifique se voc√™ pode se conectar ao host: aws-1-us-east-1.pooler.supabase.com na porta 5432")
        sys.exit(1)

    # Encontra o arquivo de migra√ß√£o mais recente
    migrations_dir = Path(__file__).parent.parent / 'migration'
    migration_files = sorted([f for f in migrations_dir.glob('*.sql') if f.name != '000_template.sql'])

    if not migration_files:
        print("‚ÑπÔ∏è  Nenhum arquivo de migra√ß√£o encontrado.")
        sys.exit(0)

    print("\nüìã Migra√ß√µes encontradas:")
    for i, file in enumerate(migration_files, 1):
        print(f"  {i}. {file.name}")

    # Pede confirma√ß√£o ao usu√°rio
    print("\n‚ö†Ô∏è  Deseja executar as migra√ß√µes listadas acima? (s/n)")
    if input().lower() != 's':
        print("üö´ Migra√ß√£o cancelada pelo usu√°rio.")
        sys.exit(0)

    # Executa cada migra√ß√£o
    for migration_file in migration_files:
        print(f"\nüöÄ Executando migra√ß√£o: {migration_file.name}")
        migration_sql = load_migration_file(migration_file)
        run_migration(conn, migration_sql)

    conn.close()
    print("\n‚ú® Todas as migra√ß√µes foram conclu√≠das com sucesso!")


if __name__ == "__main__":
    main()
